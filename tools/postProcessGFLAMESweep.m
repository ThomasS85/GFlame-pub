function [ h , dataBlock ] = postProcessGFLAMESweep( GFcase , varargin )
%POSTPROCESSGFLAMESWEEP Function postprocesses GFLAME output data which was generated by a sweep signal
%
% ////////////////////////////////////////////////////////
% // Thomas Steinbacher (steinbacher@tfd.mw.tum.de).    //
% // Created, 07.04.2014 as part of GFLAME 0.1          //
% ////////////////////////////////////////////////////////

%% Parse varargin
% last time step of time series
ind = find(strcmp(varargin,'tend'),1);
if ~isempty(ind)
  tend = varargin{ind+1};
else
  % default value
  tend = 'last';
end

% First time step of time series sweep data (if there is any)
ind = find(strcmp(varargin,'t0'),1);
if ~isempty(ind)
  t0 = varargin{ind+1};
else
  % default value
  t0 = GFcase.vel.t_transient0;
end

% Sampling Time Sweep
ind = find(strcmp(varargin,'Ts'),1);
if ~isempty(ind)
  Ts = varargin{ind+1};
else
  % default value
  Ts = 'mean';
end

% Maximum Frequency (only for plotting)
ind = find(strcmp(varargin,'maxFreq'),1);
if ~isempty(ind)
  maxFreq = varargin{ind+1};
else
  % default value
  maxFreq = 'max';
end

% Use smoothed data?
ind = find(strcmp(varargin,'doSmooth'),1);
if ~isempty(ind)
  doSmooth = 1;
else
  % default value
  doSmooth = 0;
end

% Smoothing parameter
ind = find(strcmp(varargin,'smoothing'),1);
if ~isempty(ind)
  scaleSmoothing = varargin{ind+1};
else
  % default value
  scaleSmoothing = 7;
end

% Should root folder be changed? be change?
ind = find(strcmp(varargin,'root'),1);
if ~isempty(ind)
  % Change root folder
  GFcase.p.caseRootDir = varargin{ind+1};
else
  % Leave everything as it is
end

% Should case be change?
ind = find(strcmp(varargin,'case'),1);
if ~isempty(ind)
  % Change run output folder
  GFcase.solver.resume2case = varargin{ind+1};
else
  % Load case specified by case number
  GFcase.solver.resume2case = GFcase.p.caseNumber;
end

% Name
ind = find(strcmp(varargin,'Name'),1);
if ~isempty(ind)
  Name = varargin{ind+1};
else
  % default value
  Name = '2D-Gequation Sweep';
end

% Should results be plotted? Default: no
ind = find(strcmpi(varargin,'doPlot'),1);
if ~isempty(ind)
  % use default: Do plot
  plotData = 1;
else
  % Take settings from solver
  plotData = GFcase.solver.doPlot;
  
end


%% Analyse sweep data

% Read surface data from file
f1 = fopen([num2str(GFcase.solver.resume2case),'/Surface.out'],'r');
data_A = cell2mat( textscan(f1,'%f , %f','Headerlines',1) );
fclose(f1);

% Read reference velocity data from file
f1 = fopen([num2str(GFcase.solver.resume2case),'/V_ref.out'],'r');
data_V = cell2mat( textscan(f1,'%f , %f','Headerlines',1) );
fclose(f1);

% Cut data (t0 to tend)
if isnumeric(tend) && isnumeric(t0)
  data_A = data_A( data_A(:,1)>=t0 & data_A(:,1)<=tend , : );
  data_V = data_V( data_V(:,1)>=t0 & data_V(:,1)<=tend , : );
elseif strcmpi(tend,'last') && isnumeric(t0)
  data_A = data_A( data_A(:,1)>=t0 , : );
  data_V = data_V( data_V(:,1)>=t0 , : );
elseif strcmpi(t0,'first') && isnumeric(tend)
  data_A = data_A( data_A(:,1)<=tend , : );
  data_V = data_V( data_V(:,1)<=tend , : );
end

% Calculate constant sampling time
if strcmpi(Ts,'mean')
  Ts = mean( diff(data_A(:,1)) );
end

% Interpolate data_A and data_V to same t_vec (of data_A)
data_Vtmp = interp1(data_V(:,1),data_V(:,2),data_A(:,1),'linear','extrap');
data_V = []; data_V(:,1) = data_A(:,1); data_V(:,2) = data_Vtmp;

% Generate iddata object
if ~doSmooth
  % Use raw data
  data_sw = iddata( data_A(:,2) , data_V(:,2) , [] ,'SamplingInstants',data_A(:,1),...
    'Name','GFLAME','ExperimentName',Name,...
    'TimeUnit','s','InputUnit','m/s','OutputUnit','W',...
    'InputName','uref','OutputName','dQ');
  % Resample data to constant Ts
  data_sw = siInterpolate(data_sw,Ts);
  t_vec_sw = data_sw.SamplingInstants;
  
else
  % Smooth data using the Savitzky Golay Filter
  degreePoly = 3;
  derivative = 0;
  frameSize = 2*scaleSmoothing + 1; % Must be odd!
  A_SavGol = savitzkyGolayFilt(data_A(:,2)',degreePoly,derivative,frameSize,[],2);
  
  % Interpolate data to constant time step
  n_t = ceil( (data_A(end,1) - data_A(1,1)) / Ts ) + 1;
  t_vec_sw = linspace(data_A(1,1),data_A(end,1),n_t)';
  u_vec_sw = interp1(data_V(:,1),data_V(:,2),t_vec_sw,'linear','extrap');
  y_vec_sw = interp1(data_A(:,1),A_SavGol,t_vec_sw,'linear','extrap') ;
  
  % Use smoothed and resampled data
  data_sw = iddata( y_vec_sw , u_vec_sw , Ts ,'Name','GFLAME','ExperimentName',Name,...
    'TimeUnit','s','InputUnit','m/s','OutputUnit','W',...
    'InputName','uref','OutputName','dQ');
end

% Find path to *.mat file with sweep information
d = dir([num2str(GFcase.solver.resume2case),filesep,'.']);
sub = [d(:).isdir];
nameFolds = {d(~sub).name}';
nameFolds = regexp(nameFolds,'sweep.+\.mat$','match');
nameFolds(cellfun('isempty',nameFolds)) = []; % delete empty entries
nameFolds = cellfun(@cell2mat,nameFolds,'UniformOutput',false); % convert to array of strings
p_sw.path2sweep = [num2str(GFcase.solver.resume2case),filesep,nameFolds{1}];

% Postprocess sweep data
p_sw.filePath = data_sw;
p_sw.referenceVel = 'uref';
p_sw.outputFolder = num2str(GFcase.solver.resume2case);
p_sw.maxFrequ = maxFreq;
p_sw.plotTitle = ['GFLAME ',GFcase.p.flameType,' (sweep)'];

% Analyse sweep
if plotData
  [ h,dataBlock ] = siAnalyseSweep( p_sw ,'','doPlot' );
else
  [ h,dataBlock ] = siAnalyseSweep( p_sw ,'','doNotPlot' );
end

% Save data to disk
save([GFcase.p.run_output_folder,filesep,'response_sweep.mat'],'h','dataBlock')

end

